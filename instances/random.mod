
    set I;
param n := card(I);

set SS := 0 .. (2**n - 1);

set POW {k in SS} := {i in I: (k div 2**(i-1)) mod 2 = 1};

set INFINITE := {(1, 4), (1, 9), (1, 10), (1, 11), (1, 13), (1, 16), (1, 17), (1, 18), (1, 19), (2, 4), (2, 5), (2, 7), (2, 9), (2, 12), (2, 13), (2, 16), (3, 4), (3, 8), (3, 10), (3, 13), (3, 14), (3, 16), (3, 19), (4, 6), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 16), (5, 8), (5, 11), (5, 13), (5, 16), (5, 18), (5, 19), (6, 7), (6, 8), (6, 10), (6, 13), (6, 16), (6, 17), (6, 18), (7, 8), (7, 9), (7, 11), (7, 13), (7, 14), (7, 15), (7, 16), (7, 18), (8, 11), (8, 15), (8, 17), (8, 19), (9, 10), (9, 11), (9, 13), (9, 16), (10, 13), (10, 14), (10, 15), (10, 16), (10, 18), (10, 19), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (12, 15), (12, 17), (12, 18), (13, 18), (14, 16), (14, 17), (14, 18), (15, 16), (15, 18), (16, 17), (16, 18), (16, 19), (17, 18), (18, 19)};

set LINKS := {i in I, j in I: i < j};

param cost {LINKS};
var x {LINKS} binary;

minimize TotCost: sum {(i,j) in LINKS} cost[i,j] * x[i,j];

subj to Tour {i in I}: 
   sum {(i,j) in LINKS} x[i,j] + sum {(j,i) in LINKS} x[j,i] = 2;

subj to SubtourElim {k in SS diff {0,2**n-1}}:
   sum {i in POW[k], j in I diff POW[k]: (i,j) in LINKS} x[i,j] +
   sum {i in POW[k], j in I diff POW[k]: (j,i) in LINKS} x[j,i] >= 2;
   
subj to Inf{(i,j) in INFINITE}: x[i,j] = 0;

solve;

printf "------------------------------------------------------\n";
printf{i in I, j in I: j>i and x[i,j] == 1} "(%d, %d)\n", i-1, j-1;
printf "Cost: %d\n", sum{i in I, j in I: j > i} x[i,j]*cost[i,j];
printf "------------------------------------------------------\n";

data;

set I := 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19;

param cost: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 :=
	1 . 27.442240879054026 48.62978710527145 0 60.7601486278398 62.85482990391264 9.410647168676844 36.26299090357824 0 0 0 12.630295857556762 0 99.12277628740682 69.29725848290767 0 0 0 0
	2 . . 90.98726391785014 0 0 56.28213186010911 0 39.97489384027318 0 14.903208056677009 62.47573961966588 0 0 0.199236862157659 0.1353345636599279 0 90.2866758419876 19.352571098444717 74.7140533603438
	3 . . . 0 36.4475595746393 76.68806741233381 75.93109677062063 0 76.10024288520817 0 82.97552965369364 31.66470474305747 0 0 56.2046802356076 0 86.57489727234561 86.02511217296674 0
	4 . . . . 84.91374294341415 0 0 0 10.564972143626228 0 0 0 0 0 29.911786465756364 0 54.39938784747693 32.32848204079989 2.952811008972711
	5 . . . . . 0.9432921647097303 17.211129876308874 0 81.60038313039853 21.44617191527517 0 25.186467623052643 0 78.8694749931181 94.3043530690168 0 86.4513677227523 0 0
	6 . . . . . . 0 0 65.80296841701805 0 44.69202807420909 81.0326332137727 0 4.35011923778047 43.45183928769782 0 0 0 39.19551292229433
	7 . . . . . . . 0 0 80.96808025998408 0 60.17576010777288 0 0 0 0 89.41605217691637 0 21.65982847810953
	8 . . . . . . . . 73.56387305466467 46.15551781992463 0 20.115456209316918 48.21358750751328 32.16978060730343 0 57.83532504974842 0 8.094067683747042 0
	9 . . . . . . . . . 0 0 10.876437446222031 0 54.9596921874727 30.726808068220002 0 29.04214354397365 61.989885747411236 26.318686704932382
	10 . . . . . . . . . . 67.72519173016721 3.010623148516711 0 0 0 0 79.20493649100825 0 0
	11 . . . . . . . . . . . 54.35253885972776 65.5625404676289 1.5716650457884174 0 0 0 0 0
	12 . . . . . . . . . . . . 92.46279457721539 98.37166876586384 0 96.68677927562733 0 0 34.038777008482555
	13 . . . . . . . . . . . . . 32.76648909281257 44.695246839203165 1.559595335622177 55.99187844911688 0 8.547658707379268
	14 . . . . . . . . . . . . . . 83.39700225424801 0 0 0 73.32495729563651
	15 . . . . . . . . . . . . . . . 0 86.19955879638056 0 86.67074293022104
	16 . . . . . . . . . . . . . . . . 0 0 0
	17 . . . . . . . . . . . . . . . . . 0 70.36578791878526
	18 . . . . . . . . . . . . . . . . . . 0
	19 . . . . . . . . . . . . . . . . . . .;

end;
